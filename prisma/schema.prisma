// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid()) @db.Uuid
  name     String
  email    String @unique
  password String

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  UserTask      UserTask[]
  UserTopic     UserTopic[]
  Plan          Plan[]
  PlanTopicTask PlanTopicTask[]
}

model Topic {
  id            String          @id @default(uuid()) @db.Uuid
  name          String
  Task          Task[]
  UserTopic     UserTopic[]
  Plan          Plan[]
  PlanTopicTask PlanTopicTask[]
}

model Task {
  id            String          @id @default(uuid()) @db.Uuid
  topicID       String          @db.Uuid
  topic         Topic           @relation(fields: [topicID], references: [id])
  name          String
  task_img      String
  solution_img  String?
  UserTask      UserTask[]      @relation(fields: [], references: [])
  PlanTopicTask PlanTopicTask[]
}

model UserTask {
  userID   String   @db.Uuid
  user     User     @relation(fields: [userID], references: [id])
  taskID   String   @db.Uuid
  task     Task     @relation(fields: [taskID], references: [id])
  progress Boolean?

  @@id([userID, taskID])
}

model UserTopic {
  userID   String @db.Uuid
  user     User   @relation(fields: [userID], references: [id])
  topicID  String @db.Uuid
  topic    Topic  @relation(fields: [topicID], references: [id])
  progress Float?

  @@id([userID, topicID])
}

model Plan {
  id String @id @default(uuid()) @db.Uuid

  User          User?           @relation(fields: [userId], references: [id])
  userId        String?         @db.Uuid
  Topic         Topic?          @relation(fields: [topicId], references: [id])
  topicId       String?         @db.Uuid
  PlanTopicTask PlanTopicTask[]
}

model PlanTopicTask {
  planID  String  @db.Uuid
  plan    Plan    @relation(fields: [planID], references: [id])
  topicID String  @db.Uuid
  topic   Topic   @relation(fields: [topicID], references: [id])
  taskID  String  @db.Uuid
  task    Task    @relation(fields: [taskID], references: [id])
  User    User?   @relation(fields: [userId], references: [id])
  userId  String? @db.Uuid

  @@id([planID, topicID, taskID])
}
